CREATE DATABASE IF NOT EXISTS KAN_EMS;
USE KAN_EMS;

CREATE TABLE IF NOT EXISTS Employee
(
    UserID INT NOT NULL AUTO_INCREMENT,
    FirstName VARCHAR(200),
    LastName VARCHAR(200),
    Email VARCHAR(200) UNIQUE,
    Password VARCHAR(200),
    Birthday DATE,
    Gender VARCHAR(50),
    Interests VARCHAR(200),
    ContactNumber VARCHAR(150),
    AddressContry VARCHAR(100),
    AddressCity VARCHAR(200),
    AddressState VARCHAR(200),
    AddressStreet VARCHAR(300),
    AddressNumber VARCHAR(10),
    AddressPcode VARCHAR(20),
    SubscriptionDate TIMESTAMP,
    SignUpDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    DOB DATE,
    PAN VARCHAR(16),
    Name VARCHAR(16),
    NaitonalID VARCHAR(14),
    LogInTStamp DATETIME,
    LogInGPS VARCHAR(25),
    UserStatus VARCHAR(8),
    BossID INT,
    Photo VARCHAR(100),
    PRIMARY KEY (UserID)
);

CREATE TABLE IF NOT EXISTS Job -- DONE
(
    JobID VARCHAR(30) NOT NULL,
    JobName VARCHAR(100) NOT NULL,
    PRIMARY KEY (JobID)
);

CREATE TABLE IF NOT EXISTS AmbulanceCar -- DONE
(
    CarNumber VARCHAR(10),
    CarServiceStartDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    EngineNumber VARCHAR(10),
    Carbrand VARCHAR(30),
    ChasiahNumber VARCHAR(10),
    CarModel VARCHAR(30),
    DriverPhoneNumber VARCHAR(20),
    CarStatus VARCHAR(2),

    PRIMARY KEY (CarNumber)
);

-- Car --> Trip == (1 to X)
CREATE TABLE IF NOT EXISTS Trip -- DONE
(
    TripID INTEGER AUTO_INCREMENT,       -- by default primary key is NOT NULL and UNIQUE
    AmbulanceCarID VARCHAR(10) NOT NULL,
    BatchID INTEGER,
    PatientID VARCHAR(30) NOT NULL,
    TripStartDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    TripFromLongitude VARCHAR(10) NOT NULL,
    TripFromLatitude VARCHAR(10) NOT NULL,
    TripToLongitude VARCHAR(10) NOT NULL,
    TripToLatitude VARCHAR(10) NOT NULL,
    TripCost VARCHAR(5) NOT NULL,
    TripStatus VARCHAR(2) NOT NULL,
    TripDriver VARCHAR(50),
    TripParamidic VARCHAR(50),
    FeedBack VARCHAR(50),

    PRIMARY KEY (TripID),
    FOREIGN KEY (BatchID) REFERENCES Batch(BatchID)
    FOREIGN KEY (AmbulanceCarID) REFERENCES AmbulanceCar(CarNumber)
);

CREATE TABLE IF NOT EXISTS Medicine -- DONE
(
    BarCode varchar(50),
    CountInStock VARCHAR(10),
    Name VARCHAR(100),
    Price VARCHAR(10),
    ExpirationDate VARCHAR(30),
    Implications VARCHAR(10),
    MedicineUsage TEXT,
    SideEffects TEXT,
    ActiveComponent TEXT,

    PRIMARY KEY(BarCode)
);

CREATE TABLE IF NOT EXISTS Batch   -- DONE
(
    BatchID INTEGER AUTO_INCREMENT,
    BatchReleaseDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    PRIMARY KEY(BatchID)
);

CREATE TABLE IF NOT EXISTS BatchMedicines
(
    EntryID BIGINT UNSIGNED AUTO_INCREMENT,
    BatchID INTEGER,
    MedicineID VARCHAR(50),
    Quantity INTEGER,

    PRIMARY KEY (EntryID),
    FOREIGN KEY (BatchID) REFERENCES Batch(BatchID),
    FOREIGN KEY (MedicineID) REFERENCES Medicine(BarCode)
);

CREATE TABLE if not exists Receipt (
    ReceiptID VARCHAR(30),
    TripID INTEGER NOT NULL UNIQUE,
    CasheirID VARCHAR(30),
    ReceiptCreationDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FTPFileLocation VARCHAR(300),

    FOREIGN KEY (TripID) REFERENCES Trip(TripID)
);

CREATE TABLE IF NOT EXISTS Address  -- DONE
 (
    AddressID INTEGER AUTO_INCREMENT,
    City VARCHAR(30),
    Longitude VARCHAR(10),          -- for patient return latitude and longitude
    Latitude VARCHAR(10),           -- for patient return latitude and longitude
    Street VARCHAR(30),
    Apartement VARCHAR(30),
    PostalCode VARCHAR(10),
    FloorLevel VARCHAR(30),

    PRIMARY KEY (AddressID)
);

CREATE TABLE IF NOT EXISTS PharmaCo (
    CompanyID VARCHAR(30) UNIQUE,
    CompanyName VARCHAR(50),
    ContactPerson VARCHAR(26),
    CompanyAddress VARCHAR(100),
    CompanyPhone VARCHAR(20),
    CompanyStatus VARCHAR(2)
);

CREATE TABLE IF NOT EXISTS PharmaCoMedicine (
    EntryID INT NOT NULL AUTO_INCREMENT,
    PharmaCoID VARCHAR(30),
    MedicineID varchar(50),
    primary key (EntryID),
    FOREIGN KEY (PharmaCoID) REFERENCES PharmaCo (CompanyID),
    FOREIGN KEY (MedicineID) REFERENCES Medicine (BarCode)
);

-- MR and Trip == (1 to 1)
CREATE TABLE IF NOT EXISTS MedicalRecord   -- DONE
 (
    MedicalRecordID INTEGER NOT NULL AUTO_INCREMENT,
    TripID INTEGER UNIQUE,                                      -- This Cuases 1 to 1 relationChip between (MedicalRecord and Trip) Tables
    TripStartDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    Gender VARCHAR(10),
    Age VARCHAR(3),
    BloodPressure VARCHAR(10),
    Temperature VARCHAR(30),
    BloodType VARCHAR(10),
    BloodSugar VARCHAR(10),
    CBC VARCHAR(50),
    EMG TEXT,
    ECG TEXT,
    Hepatitis VARCHAR(1),
    PhysicalExaminationImage TEXT,
    MedicineApplied VARCHAR(100),
    ProcedureDoneInCar TEXT,
    PatientStatus VARCHAR(2),
    RecommendedProcedure TEXT,
    
    PRIMARY KEY (MedicalRecordID),
    FOREIGN KEY (TripID) REFERENCES Trip(TripID)
);

-- 1 to 1 relationship between (patient and Address) tables
CREATE TABLE IF NOT EXISTS Patient 
(
    PatientID VARCHAR(30),
    PatientName VARCHAR(30),
    Age VARCHAR(3),
    Gender VARCHAR(10),
    Phone VARCHAR(20),
    PatientCallDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PatientStatus VARCHAR(2),
    LastBenifitedTime TIMESTAMP,
    FirstBenifitedTime TIMESTAMP,
    AddressID INTEGER,
    NextOfKenName VARCHAR(30),
    NextOfKenPhone VARCHAR(20),
    NextOfKenAddress VARCHAR(30) UNIQUE,

    PRIMARY KEY (PatientID),
    FOREIGN KEY (AddressID) REFERENCES Address(AddressID)
    -- FOREIGN KEY (NextOfKenAddress) REFERENCES Address(AddressID)
); 

CREATE TABLE IF NOT EXISTS Reports 
(
    ReportID VARCHAR(30) NOT NULL,
    ReportTitle VARCHAR(100) NOT NULL,
    ReportIssuedDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PatientID VARCHAR(30) NOT NULL,
    ReportDestination VARCHAR(100),
    Status VARCHAR(2) NOT NULL,
    PRIMARY KEY (ReportID)
);